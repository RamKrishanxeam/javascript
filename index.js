//üìå üîπ Variables & Data Types in JavaScript

// let nameUser = "dd";
// let nameUser = "dd";
// SyntaxError: Identifier 'nameUser' has already been declared
// let ‡§∏‡•á ‡§è‡§ï ‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§°‡§ø‡§ï‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ, ‡§á‡§∏‡§≤‡§ø‡§è SyntaxError ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à‡•§

// var nameUser = "dd";
// var nameUser = "dd";
// 1Ô∏è‚É£ var ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó (‡§ú‡•ã ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§°‡§ø‡§ï‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à ‡§î‡§∞ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è)

// const nameUser = "dd"; ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§´‡§ø‡§ï‡•ç‡§∏ ‡§∞‡§π‡•á‡§ó‡•Ä
// const nameUser = "dd";  ‡§Ø‡§π ‡§è‡§∞‡§∞ ‡§¶‡•á‡§ó‡§æ, ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø `const` ‡§ï‡•Ä ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§¨‡§¶‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä
// const ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó (‡§Ö‡§ó‡§∞ ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§¨‡§¶‡§≤‡§®‡•Ä ‡§® ‡§π‡•ã) ‡§á‡§∏‡§≤‡§ø‡§è ‡§Ø‡§π ‡§è‡§∞‡§∞ ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à‡•§

// üìå Primitive Data Types (Simple Values)

// 1Ô∏è‚É£ String
// const name = "dd";
// console.log(name);
// console.log(typeof name);

// 2Ô∏è‚É£ Number
// const age = 25;
// console.log(age);
// console.log(typeof age);

// 3Ô∏è‚É£ Boolean
// const isMarried = false;
// console.log(isMarried);
// console.log(typeof isMarried);

// 4Ô∏è‚É£ Null Empty value
// const car = null;
// console.log(car);

// 5Ô∏è‚É£ Undefined Not assigned a value
// let test;
// console.log(test);
// console.log(typeof test);

// üìå Reference Data Types (Objects)

// 1Ô∏è‚É£ Array List of values

// const hobbies = ["movies", "music"];
// console.log(hobbies);
// console.log(typeof hobbies);

// 2Ô∏è‚É£ Object literal Collection of key-value pairs
// const address = {
//   city: "Delhi",
//   state: "DL",
// };
// console.log(address);
// console.log(typeof address);

// 3Ô∏è‚É£ Date
// const today = new Date();
// console.log(today);
// console.log(typeof today);

// 4Ô∏è‚É£ Function Reusable code block
// const hello = function () {
//   console.log("Hello");
// };

// console.log(hello);
// console.log(typeof hello);

//  üìå 5Ô∏è‚É£ Symbol
// Symbol JavaScript ‡§ï‡§æ ‡§è‡§ï ‡§°‡•á‡§ü‡§æ ‡§ü‡§æ‡§á‡§™ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
// ‡§ú‡§¨ ‡§≠‡•Ä ‡§Ü‡§™ Symbol() ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ø‡§π ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ø‡•Ç‡§®‡§ø‡§ï (‡§Ö‡§≤‡§ó) ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§¶‡•á‡§§‡§æ ‡§π‡•à, ‡§≠‡§≤‡•á ‡§π‡•Ä ‡§â‡§∏‡§ï‡•Ä ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§è‡§ï ‡§ú‡•à‡§∏‡•Ä ‡§¶‡§ø‡§ñ‡•á‡•§

// let sym1 = Symbol("id");
// let sym2 = Symbol("id");

// console.log(sym1 === sym2);
// 1Ô∏è‚É£ ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (‡§§‡§æ‡§ï‡§ø ‡§ï‡•ã‡§à ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§â‡§∏‡•á ‡§ì‡§µ‡§∞‡§∞‡§æ‡§á‡§ü ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡•á)‡•§
// 2Ô∏è‚É£ Symbol ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ü‡§™ ‡§è‡§ï ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
// 3Ô∏è‚É£ ‡§Ø‡§π ‡§è‡§ï ‡§°‡•á‡§ü‡§æ ‡§ü‡§æ‡§á‡§™ ‡§π‡•à ‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

// let user = {
//   name: "Rahul",
//   [Symbol("id")]: 101,
// };

// console.log(user);

// { name: 'Rahul', [Symbol(id)]: 101 }

//  üìå 6Ô∏è‚É£ Map
// Map ‡§è‡§ï key-value pair ‡§ï‡§æ collection ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç key ‡§î‡§∞ value ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§è‡§ï relation ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï object ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π‡§æ‡§Å key ‡§ï‡•ã ‡§Ö‡§®‡•ç‡§Ø data type ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§≠‡•Ä store ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

// const map = new Map();
// set() ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§π‡§Æ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ü‡§æ‡§á‡§™ key ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

// map.set("name", "Rahul");
// map.set("age", 25);
// console.log(map);

// 7Ô∏è‚É£ Set

// Set ‡§è‡§ï collection ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§≠‡•Ä value ‡§è‡§ï ‡§π‡•Ä ‡§¨‡§æ‡§∞ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ø‡§π ‡§è‡§ï ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø value ‡§ï‡•ã store ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï object ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π‡§æ‡§Å value ‡§ï‡•ã ‡§Ö‡§®‡•ç‡§Ø data type ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§≠‡•Ä store ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

// const set = new Set();
// set.add("Rahul");
// set.add("25");
// console.log(set);

// üìå JavaScript Array Methods

// JavaScript ‡§Æ‡•á‡§Ç length ‡§è‡§ï ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§π‡•à, ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä array ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ items (elements) ‡§ï‡•Ä ‡§ï‡•Å‡§≤ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§§‡•Ä ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï ‡§®‡•â‡§®-‡§®‡•á‡§ó‡•á‡§ü‡§ø‡§µ ‡§™‡•Ç‡§∞‡•ç‡§£‡§æ‡§Ç‡§ï ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
// ‡§ú‡§¨ ‡§Ü‡§™ ‡§è‡§ï array ‡§ï‡•ã declare ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§â‡§∏‡§ï‡•Ä length 0 ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana"];
// console.log(fruits.length);

// 1Ô∏è‚É£ push() Method
// push() method ‡§è‡§ï ‡§Ø‡§æ ‡§è‡§ï ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï elements ‡§ï‡•ã array ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana"];
// fruits.push("Orange");
// console.log(fruits);

// 2Ô∏è‚É£ pop() Method
// pop() method array ‡§ï‡•á ‡§Ö‡§Ç‡§§‡§ø‡§Æ element ‡§ï‡•ã remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// fruits.pop();
// console.log(fruits);

// 3Ô∏è‚É£ shift() Method
// shift() method array ‡§ï‡•á ‡§™‡§π‡§≤‡•á element ‡§ï‡•ã remove ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// fruits.pop();
// console.log(fruits);

// 4Ô∏è‚É£ unshift() Method
// unshift() method array ‡§ï‡•á ‡§™‡§π‡§≤‡•á element ‡§ï‡•ã add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// fruits.unshift("Mango");
// console.log(fruits);

// 5Ô∏è‚É£ indexOf() Method
// indexOf() method array ‡§Æ‡•á‡§Ç element ‡§ï‡•Ä position (index) ‡§ï‡•ã return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§¶‡§ø element array ‡§Æ‡•á‡§Ç available ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã -1 return ‡§ï‡§∞‡•á‡§ó‡§æ‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// console.log(fruits.indexOf("Banana"));

// 6Ô∏è‚É£ includes() Method
// includes() method array ‡§Æ‡•á‡§Ç element ‡§ï‡•Ä presence ‡§ï‡•ã check ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// includes() ‡§è‡§ï Array ‡§î‡§∞ String ‡§Æ‡•á‡§•‡§° ‡§π‡•à, ‡§ú‡•ã ‡§Ø‡§π ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•ã‡§à ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç (element ‡§Ø‡§æ substring) ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§
// ‡§Ö‡§ó‡§∞ ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§§‡•ã ‡§Ø‡§π true ‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§µ‡§∞‡§®‡§æ false‡•§
// ‡§Ø‡§π ‡§è‡§ï boolean value return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// console.log(fruits.includes("Apple"));

// const numbers = [10, 20, 30, 40, 50];
// console.log(numbers.includes(20, 1));

// const data = [NaN, undefined, null];
// console.log(data.includes(NaN));
// console.log(data.includes(undefined));

// 7Ô∏è‚É£ reverse() Method
// reverse() method array ‡§ï‡•á elements ‡§ï‡•ã reverse order ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange"];
// fruits.reverse();
// console.log(fruits);

// 8Ô∏è‚É£ slice() Method

// slice() method array ‡§ï‡•á elements ‡§ï‡•ã copy ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§¶‡•ã arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
// 1Ô∏è‚É£ start (optional) - copy ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§æ index
// 2Ô∏è‚É£ end (optional) - copy ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§Ç‡§§‡§ø‡§Æ index
// slice() method ‡§è‡§ï ‡§®‡§Ø‡§æ array return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// slice() JavaScript ‡§ï‡§æ ‡§è‡§ï Array ‡§î‡§∞ String method ‡§π‡•à, ‡§ú‡•ã array ‡§Ø‡§æ string ‡§ï‡§æ ‡§è‡§ï ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ
// (sub-array ‡§Ø‡§æ substring) ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange", "Mango"];
// console.log(fruits.slice(2, 2));
// Index 2 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§Ü ‡§î‡§∞ ‡§Ü‡§ñ‡§ø‡§∞‡•Ä ‡§§‡§ï ‡§™‡•Ç‡§∞‡§æ ‡§≤‡§ø‡§Ø‡§æ‡•§
// console.log(fruits.slice(2));
// console.log(fruits.slice(-2));
// ‡§®‡•á‡§ó‡•á‡§ü‡§ø‡§µ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§â‡§∏‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§
// ‡§Ø‡§π‡§æ‡§Å -2 ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§Ü‡§ñ‡§ø‡§∞‡•Ä ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï ‡§®‡§Ø‡§æ array return ‡§ï‡§∞‡•á‡§ó‡§æ‡•§
// const slicedNames = fruits.slice(1, -1);
// console.log(slicedNames);

// const content = "JavaScript is awesome";
// console.log(content.slice(0, 14));
// üîπ ‡§™‡§π‡§≤‡•á 10 ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§≤‡§ø‡§è‡•§

// const sentence = "Hello, World!";
// console.log(sentence.slice(7));
// üîπ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ 7 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§ï‡§∞ ‡§Ü‡§ñ‡§ø‡§∞‡•Ä ‡§§‡§ï ‡§ï‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§≤‡§ø‡§Ø‡§æ‡•§

// 9Ô∏è‚É£ splice() Method
// splice() method array ‡§ï‡•á elements ‡§ï‡•ã remove, replace ‡§î‡§∞ add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§§‡•Ä‡§® arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
// 1Ô∏è‚É£ start - remove ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§æ index
// 2Ô∏è‚É£ deleteCount - remove ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•Å‡§≤ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ
// 3Ô∏è‚É£ items - add ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è elements
// splice() method ‡§è‡§ï ‡§®‡§Ø‡§æ array return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const fruits = ["Apple", "Banana", "Orange", "Mango"];
// fruits.splice(1, 3, "Lemon", "Kiwi");
// console.log(fruits);

// const fruits = ["Apple", "Banana", "Orange", "Mango"];
// fruits.splice(2, 0, "Lemon", "Kiwi");
// console.log(fruits);

// 1Ô∏è‚É£ forEach() Method
// forEach() JavaScript ‡§ï‡§æ ‡§è‡§ï Array method ‡§π‡•à, ‡§ú‡•ã ‡§π‡§∞ ‡§è‡§ï element ‡§™‡§∞
// ‡§è‡§ï function ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π loop ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ readable ‡§î‡§∞ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
// ‚ùå ‡§Ø‡§π ‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ array ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ‡§§‡§æ ‡§î‡§∞ return ‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
// forEach() method array ‡§ï‡•á elements ‡§™‡§∞ function ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§§‡•Ä‡§® arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
// 1Ô∏è‚É£ item - current element
// 2Ô∏è‚É£ index - current index
// 3Ô∏è‚É£ arr - current array
// forEach() method ‡§ï‡•ã‡§à value return ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// index ‡§∏‡•á element ‡§ï‡•Ä position ‡§î‡§∞ arr ‡§∏‡•á ‡§™‡•Ç‡§∞‡§æ array access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

// const fruits = ["Apple", "Banana", "Orange", "Mango"];
// let users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];
// users.forEach((element, index, arr) => {
//   console.log(element, index, arr);
// });

// üîπ forEach() vs map() ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞

// forEach() method ‡§ï‡•ã‡§à value return ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ú‡§¨‡§ï‡§ø map() method ‡§è‡§ï ‡§®‡§Ø‡§æ array return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// forEach() method ‡§ï‡•ã‡§à array ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ‡§§‡§æ, ‡§ú‡§¨‡§ï‡§ø map() method ‡§è‡§ï ‡§®‡§Ø‡§æ array ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§

// 2Ô∏è‚É£ map() Method

// map() JavaScript ‡§ï‡§æ ‡§è‡§ï Array method ‡§π‡•à, ‡§ú‡•ã ‡§π‡§∞ ‡§è‡§ï element ‡§™‡§∞ function ‡§ö‡§≤‡§æ‡§ï‡§∞ ‡§è‡§ï ‡§®‡§Ø‡§æ array ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§
// ‚úÖ ‡§Ø‡§π original array ‡§ï‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§¶‡§≤‡§§‡§æ, ‡§¨‡§≤‡•ç‡§ï‡§ø ‡§è‡§ï ‡§®‡§Ø‡§æ modified array return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// map() method array ‡§ï‡•á elements ‡§™‡§∞ function ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§§‡•Ä‡§® arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
// 1Ô∏è‚É£ item - current element
// 2Ô∏è‚É£ index - current index
// 3Ô∏è‚É£ arr - current array

// const users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];

// const newUsers = users.map((element, index) => {
//   console.log(element, index);
// });

// const products = [
//   { name: "Laptop", price: 50000 },
//   { name: "Mobile", price: 20000 },
//   { name: "Tablet", price: 30000 },
// ];

// const newProducts = products.map((element, index) => {
//   console.log(element.price, element.price * 0.1);

//   return { name: element.name, price: element.price - element.price * 0.1 }; // 10% Discount
// });

// console.log(newProducts);

// 3Ô∏è‚É£ filter() Method
// filter() method array ‡§ï‡•á elements ‡§ï‡•ã filter ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï ‡§®‡§Ø‡§æ array return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// filter() method array ‡§ï‡•á elements ‡§™‡§∞ function ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§§‡•Ä‡§® arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§

// 1Ô∏è‚É£ item - current element
// 2Ô∏è‚É£ index - current index
// 3Ô∏è‚É£ arr - current array

// const users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];

// const newUsers = users.filter((element, index) => {
//   return element.name === "Neha";
// });

// console.log(newUsers);

// üîπ map() vs forEach() ‡§Æ‡•á‡§Ç ‡§Ö‡§Ç‡§§‡§∞
//             map()  forEach()
// Return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?	‚úÖ ‡§π‡§æ‡§Ç	‚ùå ‡§®‡§π‡•Ä‡§Ç
// ‡§®‡§Ø‡§æ Array ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à?	‚úÖ ‡§π‡§æ‡§Ç	‚ùå ‡§®‡§π‡•Ä‡§Ç
// Use ‡§ï‡§¨ ‡§ï‡§∞‡•á‡§Ç? ‡§ú‡§¨ ‡§®‡§Ø‡§æ array ‡§ö‡§æ‡§π‡§ø‡§è 	‡§ú‡§¨ ‡§ï‡•Å‡§õ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã (Print, API Call)

// 4Ô∏è‚É£ reduce() Method
// reduce() method array ‡§ï‡•á elements ‡§ï‡•ã reduce ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï ‡§®‡§Ø‡§æ value return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// reduce() method array ‡§ï‡•á elements ‡§™‡§∞ function ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§ö‡§æ‡§∞ arguments ‡§≤‡•á‡§§‡§æ ‡§π‡•à‡•§
// 1Ô∏è‚É£ accumulator - total value
// 2Ô∏è‚É£ item - current element
// 3Ô∏è‚É£ index - current index
// 4Ô∏è‚É£ arr - current array
// reduce() JavaScript ‡§ï‡§æ ‡§è‡§ï Array method ‡§π‡•à,
//  ‡§ú‡•ã array ‡§ï‡•á ‡§∏‡§≠‡•Ä elements ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§ï‡§∞ ‡§è‡§ï ‡§π‡•Ä value ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§π‡§∞ element ‡§™‡§∞ function ‡§ö‡§≤‡§æ‡§ï‡§∞ ‡§è‡§ï final result return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§á‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó total, average, objects ‡§ï‡•ã merge ‡§ï‡§∞‡§®‡•á, ‡§î‡§∞ complex calculations ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

// const numbers = [10, 20, 30, 40, 50];

// const total = numbers.reduce((accumulator, item, index, arr) => {
//   //   console.log(accumulator, item, index, arr);
//   return accumulator + item;
// });

// console.log(total);

// 5Ô∏è‚É£ find() Method

// find() method array ‡§ï‡•á elements ‡§Æ‡•á‡§Ç first element ‡§ï‡•ã return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§ú‡•ã function ‡§ï‡•á condition ‡§ï‡•ã satisfy ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§è‡§ï single value return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// find() method array ‡§ï‡•á elements ‡§™‡§∞ function ‡§ï‡•ã call ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// find() JavaScript ‡§ï‡§æ ‡§è‡§ï Array method ‡§π‡•à, ‡§ú‡•ã ‡§™‡§π‡§≤‡§æ ‡§ê‡§∏‡§æ element return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
//  ‡§ú‡•ã ‡§¶‡§ø‡§è ‡§ó‡§è condition ‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ø‡§π ‡§∏‡§ø‡§∞‡•ç‡§´‡§º ‡§™‡§π‡§≤‡§æ matching element return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§®‡§æ ‡§ï‡§ø ‡§™‡•Ç‡§∞‡§æ array‡•§
// ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à element match ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ, ‡§§‡•ã ‡§Ø‡§π undefined return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];

// const user = users.find((element, index) => {
//   //   return element.name === "ggdg"; //undefined
//   return element.name === "Rohan";
// });

// console.log(user);

// 6Ô∏è‚É£ findIndex() Method

// findIndex() JavaScript ‡§ï‡§æ ‡§è‡§ï Array method ‡§π‡•à, ‡§ú‡•ã ‡§™‡§π‡§≤‡§æ ‡§ê‡§∏‡§æ element ‡§ï‡§æ
// index return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§¶‡§ø‡§è ‡§ó‡§è condition ‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‡§Ö‡§ó‡§∞ element ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡§æ index return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‚úÖ ‡§Ö‡§ó‡§∞ element ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§§‡§æ, ‡§§‡•ã -1 return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

// const users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];

// const userIndex = users.findIndex((element, index) => {
//   return element.name === "Rohan";
// });

// console.log(userIndex);

// 7Ô∏è‚É£ some() Method
// some() ‡§è‡§ï JavaScript Array method ‡§π‡•à,
//  ‡§ú‡•ã ‡§Ø‡§π check ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ array ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§≠‡•Ä element condition ‡§ï‡•ã match ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§
// ‚úÖ ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§è‡§ï element condition ‡§ï‡•ã satisfy ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§§‡•ã true return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// ‚úÖ ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§≠‡•Ä element match ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ, ‡§§‡•ã false return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// üîπ ‡§ú‡•à‡§∏‡•á ‡§π‡•Ä some() ‡§ï‡•ã ‡§™‡§π‡§≤‡§æ matching element ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§Ø‡§π ‡§§‡•Å‡§∞‡§Ç‡§§ true return ‡§ï‡§∞ ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§¨‡§æ‡§ï‡•Ä elements ‡§ï‡•ã check ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
// const users = [
//   { name: "Amit", age: 25 },
//   { name: "Neha", age: 30 },
//   { name: "Rohan", age: 28 },
// ];

// const IsUser = users.some((element, index) => {
//   //   return element.name === "Rohan";
//   return element.age >= 30;
// });

// console.log(IsUser);


// 8Ô∏è‚É£ every() Method